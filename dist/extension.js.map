{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://json2any/./src/json2css.ts","webpack://json2any/./src/json2dts.ts","webpack://json2any/external commonjs \"vscode\"","webpack://json2any/webpack/bootstrap","webpack://json2any/./src/extension.ts"],"sourcesContent":["export function toCSS(str: string) {\n  const cssArray = str.split(',');\n  const newCssArray = cssArray.map((item) => {\n    if (item) {\n      let [name, value] = item.split(':');\n\n      name = name.replace(/[A-Z]/g, function (match) {\n        return '-' + match.toLowerCase();\n      });\n\n      value = value.replace(/'/g, '');\n\n      return `${name}:${value}`;\n    }\n    return item;\n  });\n  return newCssArray.join(';');\n}\n","// https://github.com/beshanoe/json2ts\n\ninterface IJson2TsConfigPrivate {\n  prependWithI: boolean;\n  sortAlphabetically: boolean;\n  addExport: boolean;\n  useArrayGeneric: boolean;\n  optionalFields: boolean;\n  prefix: string;\n  rootObjectName: string;\n}\n\nexport type IJson2TsConfig = Partial<IJson2TsConfigPrivate>;\n\nexport class Json2Ts {\n  private config: IJson2TsConfigPrivate;\n\n  private interfaces: {\n    [name: string]: {\n      [field: string]: string;\n    };\n  } = {};\n\n  constructor(config: IJson2TsConfig = {}) {\n    this.config = {\n      // 每个属性都加I\n      prependWithI: true,\n      // 字母顺序排序\n      sortAlphabetically: false,\n      // 添加export\n      addExport: false,\n      // 使用Array<T>\n      useArrayGeneric: false,\n      // 全部可选\n      optionalFields: false,\n      // 类型前缀 类似于namespace功能\n      prefix: '',\n      // 根节点名称\n      rootObjectName: 'RootObject',\n      ...config,\n    };\n  }\n\n  convert(json: {}) {\n    this.interfaces = {};\n    this.unknownToTS(json);\n    return this.interfacesToString();\n  }\n\n  private unknownToTS(value: {}, key: string | undefined = void 0) {\n    let type: string = typeof value;\n    if (type === 'object') {\n      if (Array.isArray(value)) {\n        type = this.arrayToTS(value, key);\n      } else {\n        type = this.objectToTS(value, key && this.capitalizeFirst(key));\n      }\n    }\n    return type;\n  }\n\n  private arrayToTS(array: {}[], key: string | undefined = void 0) {\n    let type = array.length ? void 0 : 'any';\n    for (let item of array) {\n      const itemType = this.unknownToTS(item, this.keyToTypeName(key));\n      if (type && itemType !== type) {\n        type = 'any';\n        break;\n      } else {\n        type = itemType;\n      }\n    }\n    return this.config.useArrayGeneric ? `Array<${type}>` : `${type}[]`;\n  }\n\n  private keyToTypeName(key: string | undefined = void 0) {\n    if (!key || key.length < 2) {\n      return key;\n    }\n    const [first, ...rest]: string[] = Array.prototype.slice.apply(key);\n    const last = rest.pop();\n    return [first.toUpperCase(), ...rest, last === 's' ? '' : last].join('');\n  }\n\n  private capitalizeFirst(str: string) {\n    const [first, ...rest]: string[] = Array.prototype.slice.apply(str);\n    return [first.toUpperCase(), ...rest].join('');\n  }\n\n  private objectToTS(\n    obj: Record<string, string>,\n    type: string = this.config.rootObjectName\n  ) {\n    if (obj === null) {\n      return 'any';\n    }\n    const { prependWithI, prefix } = this.config;\n    if (prependWithI) {\n      type = `I${prefix || ''}${type}`;\n    }\n    if (!this.interfaces[type]) {\n      this.interfaces[type] = {};\n    }\n    const interfaceName = this.interfaces[type];\n    Object.keys(obj).forEach((key) => {\n      const value = obj[key];\n      const fieldType = this.unknownToTS(value, key);\n      if (!interfaceName[key] || interfaceName[key].indexOf('any') === 0) {\n        interfaceName[key] = fieldType;\n      }\n    });\n    return type;\n  }\n\n  private interfacesToString() {\n    const { sortAlphabetically, addExport, optionalFields } = this.config;\n    return Object.keys(this.interfaces)\n      .map((name) => {\n        const interfaceStr = [\n          `${addExport ? 'export ' : ''}interface ${name} {`,\n        ];\n        const fields = Object.keys(this.interfaces[name]);\n        if (sortAlphabetically) {\n          fields.sort();\n        }\n        fields.forEach((field) => {\n          const type = this.interfaces[name][field];\n          interfaceStr.push(`  ${field}${optionalFields ? '?' : ''}: ${type};`);\n        });\n        interfaceStr.push('}\\n');\n        return interfaceStr.join('\\n');\n      })\n      .join('\\n');\n  }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { Json2Ts, IJson2TsConfig } from './json2dts';\nimport { toCSS } from './json2css';\n\nconst replaceSelectionText = (val: string) => {\n  const editor = vscode.window.activeTextEditor;\n  if (editor) {\n    const selection = editor.selection;\n    editor.edit((editBuilder) => {\n      editBuilder.replace(\n        new vscode.Range(selection.start, selection.end),\n        val\n      );\n    });\n  }\n};\n\nconst replaceAllText = (val: string, start: number) => {\n  const editor = vscode.window.activeTextEditor;\n  if (editor) {\n    editor.edit((editBuilder) => {\n      // 从开始到结束，全量替换\n      const end = new vscode.Position(start, 0);\n      editBuilder.replace(\n        new vscode.Range(new vscode.Position(0, 0), end),\n        val\n      );\n    });\n  }\n};\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  // The command has been defined in the package.json file\n  // Now provide the implementation of the command with registerCommand\n  // The commandId parameter must match the command field in package.json\n  const cssobj2css = vscode.commands.registerCommand('cssobj2css', () => {\n    // The code you place here will be executed every time your command is executed\n\n    const editor = vscode.window.activeTextEditor;\n    if (editor) {\n      const selection = editor.selection;\n      let text = editor.document.getText(selection);\n      replaceSelectionText(toCSS(text));\n    }\n  });\n\n  const obj2dts = vscode.commands.registerCommand('json2dts', () => {\n    const editor = vscode.window.activeTextEditor;\n    if (editor) {\n      const selection = editor.selection;\n\n      let jsonInput = editor.document.getText(selection);\n      const json2tsConfig = vscode.workspace\n        .getConfiguration()\n        .get('vscodePluginBtrip.json2ts') as IJson2TsConfig;\n\n      try {\n        // TODO 配置项\n        const json2ts = new Json2Ts(json2tsConfig);\n        if (jsonInput) {\n          const json = JSON.parse(jsonInput);\n          const resultOutput = json2ts.convert(json);\n          replaceSelectionText(resultOutput);\n        } else {\n          // 获取全量\n          jsonInput = editor.document.getText();\n          const json = JSON.parse(jsonInput);\n          const resultOutput = json2ts.convert(json);\n          replaceAllText(resultOutput, editor.document.lineCount + 1);\n        }\n      } catch (e) {\n        vscode.window.showErrorMessage('不是json对象');\n      }\n    }\n  });\n\n  context.subscriptions.push(cssobj2css);\n  context.subscriptions.push(obj2dts);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["str","split","map","item","name","value","replace","match","toLowerCase","join","constructor","config","interfaces","this","prependWithI","sortAlphabetically","addExport","useArrayGeneric","optionalFields","prefix","rootObjectName","convert","json","unknownToTS","interfacesToString","key","type","Array","isArray","arrayToTS","objectToTS","capitalizeFirst","array","length","itemType","keyToTypeName","first","rest","prototype","slice","apply","last","pop","toUpperCase","obj","interfaceName","Object","keys","forEach","fieldType","indexOf","interfaceStr","fields","sort","field","push","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","replaceSelectionText","val","editor","vscode","window","activeTextEditor","selection","edit","editBuilder","Range","start","end","context","cssobj2css","commands","registerCommand","text","document","getText","toCSS","obj2dts","jsonInput","json2tsConfig","workspace","getConfiguration","get","json2ts","Json2Ts","JSON","parse","resultOutput","Position","replaceAllText","lineCount","e","showErrorMessage","subscriptions"],"sourceRoot":""}